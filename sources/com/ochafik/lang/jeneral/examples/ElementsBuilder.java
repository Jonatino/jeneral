/*
   Copyright 2008 Olivier Chafik

   Licensed under the Apache License, Version 2.0 (the License);
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an AS IS BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

   This file comes from the Jeneral project (Java Reifiable Generics & Class Templates)

       http://jeneral.googlecode.com/.
*/
package com.ochafik.lang.jeneral.examples;

import java.io.IOException;

import javax.swing.JLabel;

import com.ochafik.lang.jeneral.annotations.ParamConstructor;
import com.ochafik.lang.jeneral.annotations.Property;
import com.ochafik.lang.jeneral.annotations.Template;

// Declare that ElementsBuild is a template.
// It has to be abstract and to implement ElementsBuilder_Template, which is autogenerated on the fly in Eclipse, NetBeans or with the apt tool in Sun's JDK
@Template
public abstract class ElementsBuilder<T> implements _ElementsBuilder_<T> {
	 
	// Generate getters and setters for the 'arg' property, and append it to all ElementBuilder's factory methods
	@Property(addToConstructors = true)
	String arg;
	
	// Declare that T must have a constructor T(String) that throws no checked exception, and that it should be accessible as the method new_T :
	@ParamConstructor
	public abstract T new_T(String arg) throws IOException;
	
	@ParamConstructor
	public abstract T new_T(T other) throws IOException;
	
	public T buildElement() throws IOException {
		return new_T(getArg());
	}
	
	public T buildElement(T other) throws IOException {
		return new_T(other);
	}
	
	public static void main(String[] args) {
		// There is one newInstance method for each public constructor of the template class
		// Each newInstance method has the following arguments :
		//   - classes of generic template parameter 
		//   - constant template parameters, if any (here Test has no constant template parameter)
		//   - arguments of the constructor that corresponds to this newInstance method (here String arg, which was added implicitely to the unique Test() constructor by the @Property(fromConstructor = true) annotation)
		try {
			ElementsBuilder<JLabel> labelBuilder = ElementsBuilder.template.newInstance(JLabel.class, "Default Label Text");
			System.out.println(labelBuilder.buildElement());
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		try {
			ElementsBuilder<Integer> intBuilder = ElementsBuilder.template.newInstance(Integer.TYPE, "Default Label Text");
			System.out.println(intBuilder.buildElement(10));
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			ElementsBuilder<Integer> intBuilder = ElementsBuilder.template.newInstance(Integer.class, "Default Label Text");
			System.out.println(intBuilder.buildElement());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
	}
}
